type Query {
  color(color: String!): String!
  dancer: [Dancer!]!
  record(type: FrameType!): [ID!]!
  controlMap(frameID: ID!): ControlMap
}

enum FrameType{
  control,
  position
}


type Dancer {
  name: String!
  parts: [Part!]!
}

type Part {
  name: String!
  controlData: [Control!]!
}

type Control {
  frame: ControlFrame!
  type: ControlType!
  status: ControlDevice!
}

interface ControlDevice{
  id: ID!
}

type Fiber implements ControlDevice{
  id: ID!
  color: String!
  alpha: Int!
}

type EL implements ControlDevice {
  id: ID!
  value: Int!
}

type LED implements ControlDevice {
  id: ID!
  src: String!
  alpha: Int!
}

enum ControlType{
  FIBER,
  EL,
  LED
}

type ControlMap{
  start: Int!
  fade: Boolean!
  dancerStatus: [DancerStatus!]!
}

type DancerStatus {
  name: String!
  parts: [PartStatus!]!
}

type PartStatus {
  name: String!
  type: ControlType!
  controlData: ControlDevice!
}