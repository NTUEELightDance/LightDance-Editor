# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddDancerInput {
  name: String!
}

input AddPartInput {
  dancerName: String!
  name: String!
  type: String!
}

type Color {
  color: String!
  colorCode: String!
}

input ColorOrderByWithRelationInput {
  color: SortOrder
  colorCode: SortOrder
}

enum ColorScalarFieldEnum {
  color
  colorCode
}

input ColorWhereInput {
  AND: [ColorWhereInput!]
  color: StringFilter
  colorCode: StringFilter
  NOT: [ColorWhereInput!]
  OR: [ColorWhereInput!]
}

input ColorWhereUniqueInput {
  color: String
  colorCode: String
}

type Control {
  frame: ControlFrame!
  status: ControlDevice!
}

union ControlDevice = EL | FIBER | LED

type ControlFrame {
  editing: String
  fade: Boolean!
  id: ID!
  start: Float!
}

"""The basic control types"""
enum ControlType {
  FIBER
  LED
}

type Dancer {
  _count: DancerCount
  id: Int!
  name: String!
}

type DancerCount {
  parts: Int!
  positionData: Int!
}

type DancerResponse {
  id: Float!
  msg: String
  name: String!
  ok: Boolean!
  parts: [Part!]!
  positionData: [Position!]!
}

input deleteDancerInput {
  id: Float!
}

input DeletePartInput {
  dancerName: String!
  id: Float!
}

input editDancerInput {
  id: Float!
  name: String!
}

input EditPartInput {
  dancerName: String!
  id: Float!
  name: String!
  type: String!
}

type EL {
  value: Int!
}

type FIBER {
  alpha: Float!
  color: String!
}

type LED {
  alpha: Float!
  src: String!
}

type Map {
  frames: MapQueryObjectId!
}

"""Mongo object id scalar type"""
scalar MapQueryObjectId

type Mutation {
  addDancer(dancer: AddDancerInput!): DancerResponse!
  addPart(part: AddPartInput!): PartResponse!
  CancelEditControl(FrameID: String!): RequestEditResponse!
  CancelEditPosition(FrameID: String!): RequestEditResponse!
  deleteDancer(dancer: deleteDancerInput!): DancerResponse!
  deletePart(part: DeletePartInput!): PartResponse!
  editDancer(dancer: editDancerInput!): DancerResponse!
  editPart(part: EditPartInput!): PartResponse!
  RequestEditControl(FrameID: String!): RequestEditResponse!
  RequestEditPosition(FrameID: String!): RequestEditResponse!
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Part {
  controlData: [Control!]!
  id: ID!
  name: String!
  type: ControlType
}

type PartResponse {
  controlData: [Control!]!
  id: ID!
  msg: String
  name: String!
  ok: Boolean!
  type: ControlType
}

type Position {
  frame: PositionFrame!
  x: Float!
  y: Float!
  z: Float!
}

type PositionFrame {
  editing: String
  id: ID!
  start: Float!
}

type Query {
  color(where: ColorWhereUniqueInput!): Color
  colors(cursor: ColorWhereUniqueInput, distinct: [ColorScalarFieldEnum!], orderBy: [ColorOrderByWithRelationInput!], skip: Int, take: Int, where: ColorWhereInput): [Color!]!
  ControlMap: Map!
  dancer: [Dancer!]!
}

enum QueryMode {
  default
  insensitive
}

type RequestEditResponse {
  editing: String
  ok: Boolean!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
