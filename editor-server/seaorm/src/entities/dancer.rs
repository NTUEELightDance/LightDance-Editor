//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Dancer")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub model_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::control_data::Entity")]
    ControlData,
    #[sea_orm(
        belongs_to = "super::model::Entity",
        from = "Column::ModelId",
        to = "super::model::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Model,
    #[sea_orm(has_many = "super::position_data::Entity")]
    PositionData,
}

impl Related<super::control_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ControlData.def()
    }
}

impl Related<super::model::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Model.def()
    }
}

impl Related<super::position_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PositionData.def()
    }
}

impl Related<super::position_frame::Entity> for Entity {
    fn to() -> RelationDef {
        super::position_data::Relation::PositionFrame.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::position_data::Relation::Dancer.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
