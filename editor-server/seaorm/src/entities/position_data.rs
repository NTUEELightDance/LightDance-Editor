//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "PositionData")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub dancer_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub frame_id: i32,
    #[sea_orm(column_type = "Double")]
    pub x: f64,
    #[sea_orm(column_type = "Double")]
    pub y: f64,
    #[sea_orm(column_type = "Double")]
    pub z: f64,
    #[sea_orm(column_type = "Double")]
    pub rx: f64,
    #[sea_orm(column_type = "Double")]
    pub ry: f64,
    #[sea_orm(column_type = "Double")]
    pub rz: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dancer::Entity",
        from = "Column::DancerId",
        to = "super::dancer::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Dancer,
    #[sea_orm(
        belongs_to = "super::position_frame::Entity",
        from = "Column::FrameId",
        to = "super::position_frame::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PositionFrame,
}

impl Related<super::dancer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dancer.def()
    }
}

impl Related<super::position_frame::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PositionFrame.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
